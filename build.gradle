plugins {
   id 'java'
   id 'eclipse'
   id 'idea'
   id 'application'
   id "com.github.spotbugs" version "5.0.14"
   id 'project-report'
   id "com.github.ben-manes.versions" version "0.52.0"
   id "org.owasp.dependencycheck" version "8.2.1"
}

// find newer versions for dependent libraries 
// ./gradlew dependencyUpdates
//
// finds security vulnerabilities in dependent libraries
// ./gradlew dependencyCheckAnalyze


ext {
   versionProperties = file("${rootProject.projectDir.canonicalPath}/src/main/resources/version.properties")
   dayFormat = 'MM/dd/yyy'
   timeFormat = 'H:mm:ss z'
   gradleVersionLocal = '8.2'
}

sourceCompatibility = 1.17

// Load version info during configuration phase
version = readVersionInfo(versionProperties)

mainClassName = "org.gssb.accounting.Charger"
group = "org.gssb"


eclipse {
	classpath {
//		defaultOutputDir = file('bin')
		downloadSources=true
	}
}

// Jar task configuration
jar {
   exclude ("licenses/**")
	manifest {
		attributes 'Implementation-Title': 'Accounting Automation for Sycamore', 'Implementation-Version': version
	}
}

repositories {
   mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation 'org.seleniumhq.selenium:selenium-java:4.8.3'   ///4.29.0?
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-csv
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.18.2'
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'

    implementation 'commons-cli:commons-cli:1.9.0'
    // commons configuration
    implementation 'org.apache.commons:commons-configuration2:2.11.0'
    // https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils
    implementation 'commons-beanutils:commons-beanutils:1.10.1'
    
    implementation "org.apache.logging.log4j:log4j-api:2.24.3"
    implementation "org.apache.logging.log4j:log4j-core:2.24.3"

    testCompileOnly 'org.projectlombok:lombok:1.18.36'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'
    
    // test engine for gradle build
    // For JUnit 5 support
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.12.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.12.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.12.0'
  
    // Add these for test suites
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.12.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-suite-engine:1.12.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.0'
}

test {
   useJUnitPlatform()
//   exclude 'org/gssb/accounting/**/AllTests.class'

   //disable as potentially we have a concurrency issue in test cases
   maxParallelForks = 1
   // each test is run by parallel agent; rational is that we have a number of
   // large test cases that require a long execution time with lot's of I/O
   forkEvery = 4
}

spotbugsMain {
    ignoreFailures = false
    excludeFilter = file('findbugs_exclusions.xml')
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
}

spotbugsTest {
    ignoreFailures = false
    excludeFilter = file('findbugs_exclusions.test.xml')
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
        }
    }
}

 //include all licenses of sub-project
 applicationDistribution.from('src/main/resources/licenses/runtime') {
   into "licences"
   include "**"
}

applicationDistribution.from('src/main/dist') {into "/"}
applicationDistribution.from('src/main/resources') {
   into "conf"
   include "*.properties"
   include "*.xml"
}
applicationDistribution.from('src/bin') {
   into "bin"
   include "*.sh"
   include "*.bat"
}

   applicationDistribution.from('.') {
      into "conf"
      include "LICENSE"
   }

task forceTest( ) {
   dependsOn cleanTest, test
}

   // version of build

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
   if (graph.hasTask(":release")) {
      if (!version.isRelease) {
         version.isRelease = false
         updateBuildRelease(false)
      }
   } else {
      if (version.isRelease) {
         version.isRelease = true
         updateBuildRelease(true)
      }
   }
}

task incrementBuildNumber(group: 'versioning', description: 'Increments the build.number number stored in the version.properties file') {
   doLast {
      updateTransientVersionProperties()
   }
}

void updateTransientVersionProperties() {
   Date d = new Date()
   ant.propertyfile(file: versionProperties){
      entry(key: 'build.date', type: 'date', operation: '=', value: d, pattern: dayFormat)
   }
   ant.propertyfile(file: versionProperties){
      entry(key: 'build.time', type: 'date', operation: '=', value: d, pattern: timeFormat)
   }
   version.buildNumber++
   ant.propertyfile(file: versionProperties){
      entry(key: 'build.number', type: 'int', operation: '=', value: version.buildNumber)
   }

   ant.propertyfile(file: versionProperties){
      entry(key: 'product.version', type: 'string', operation: '=', value: version)
   }
}

task release(group: 'versioning', description: 'A marker task that triggers updating of the build.isRelease property in the version.properties file to true', dependsOn: 'distZip') {
   doLast {
      updateBuildRelease(true)
   }
}

void updateBuildRelease(Boolean value) {
   ant.propertyfile(file: versionProperties) {
      entry(key: 'build.isRelease', operation: '=', value: value)
   }
}

task createWrapper(type: Wrapper) {
   gradleVersion = gradleVersionLocal
}

class VersionInfo {
   Integer major
   Integer minor
   Integer patch
   String buildDay
   String buildTime
   Integer buildNumber
   Boolean isRelease

   VersionInfo(Integer major, Integer minor, Integer patch, Integer buildNumber, String buildDay, String buildTime, Boolean isRelease) {
      this.major = major
      this.minor = minor
      this.patch = patch

      this.buildNumber = buildNumber
      this.isRelease = isRelease
      this.buildDay = buildDay
      this.buildTime = buildTime
   }

   String toString() {
      "$major.$minor.$patch${isRelease ? '' :'-'+buildNumber + '-SNAPSHOT'}"
   }
}

VersionInfo readVersionInfo(propertiesFile) {
    //println 'Using ' + propertiesFile
   if (!propertiesFile.exists()) {
      throw new GradleException("Version information properties file does not exist: $versionProperties.canonicalPath")
   }

   Properties props = new Properties()

   propertiesFile.withInputStream { it ->
      props.load(it)
   }

   new VersionInfo(props.'product.version.major'.toInteger(),
         props.'product.version.minor'.toInteger(),
         props.'product.version.patch'.toInteger(),
         props.'build.number'.toInteger(),
         props.'build.date',
         props.'build.time',
         props.'build.isRelease'.toBoolean())
}

task printVersion(group: 'versioning', description: 'Prints versioning info as persisted in the version.properties file') {
   doLast {
	   println "Major Version: $version.major"
	   println "Minor Version: $version.minor"
	   println "Patch Version: $version.patch"
	   println "Build Number: $version.buildNumber"
	   println "Build Day: $version.buildDay"
	   println "Build Time: $version.buildTime"
	}
}
